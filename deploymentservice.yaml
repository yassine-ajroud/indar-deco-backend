apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 2
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: instartech/backend:instardeco # Ton image Docker
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081 # Nouveau port pour l'application
          env:
            - name: MONGO_URL
              value: "mongodb://root:instar@mongodb:27017/indar-deco" # Connexion MongoDB via le service (port aligné)
            - name: NODE_ENV
              value: "production"  # Variable d'environnement pour spécifier l'environnement
          volumeMounts:
            - name: uploads-volume
              mountPath: /app/uploads # Point de montage pour les uploads
      volumes:
        - name: uploads-volume
          emptyDir: {}  # Utilisation d'un volume temporaire vide (emptyDir)
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"  # Tolérer le taint du nœud de contrôle

---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8081 # Nouveau port pour exposer le service
      targetPort: 8081 # Point d'entrée pour le service
  type: NodePort # Pour exposer le service sur un port accessible
  name: backend-service

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017 # Port MongoDB aligné avec celui dans l'URL
      targetPort: 27017 # Port d'entrée pour MongoDB
  type: ClusterIP # Service interne pour MongoDB
